# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'interface_for_images.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys
import cv2
import time

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel, QAction, QFileDialog
from PyQt5.QtGui import QPixmap
from threading import Thread

from IntersectionDetector import IntersectionDetector


class MainWindow(QMainWindow):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.filenames = None
        self.detected = None
        self.table = []
        

        self.cur_image_indx = 0
        self.detector = IntersectionDetector()
        self.setupUi()

    def setupUi(self):
        self.setObjectName("self")
        self.resize(799, 600)
        self.setWindowTitle("MainWindow")

        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setObjectName("widget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout.setContentsMargins(-1, -1, 0, -1)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label_image = QtWidgets.QLabel(self.widget)
        self.label_image.setMinimumSize(QtCore.QSize(500, 400))
        self.label_image.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.label_image.setObjectName("label_image")
        self.verticalLayout.addWidget(self.label_image)
        self.widget_2 = QtWidgets.QWidget(self.widget)
        self.widget_2.setObjectName("widget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.widget_2)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.pushButton_openFile = QtWidgets.QPushButton(self.widget_2)
        self.pushButton_openFile.setObjectName("pushButton_openFile")
        self.horizontalLayout_2.addWidget(self.pushButton_openFile)
        self.pushButton_Prev = QtWidgets.QPushButton(self.widget_2)
        self.pushButton_Prev.setObjectName("pushButton_Prev")
        self.horizontalLayout_2.addWidget(self.pushButton_Prev)
        self.pushButton_Next = QtWidgets.QPushButton(self.widget_2)
        self.pushButton_Next.setObjectName("pushButton_Next")
        self.horizontalLayout_2.addWidget(self.pushButton_Next)
        self.verticalLayout_2.addLayout(self.horizontalLayout_2)
        self.verticalLayout.addWidget(self.widget_2)
        self.tableWidget = QtWidgets.QTableWidget(self.widget)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.verticalLayout.addWidget(self.tableWidget)
        self.horizontalLayout.addWidget(self.widget)
        self.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(self)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 799, 21))
        self.menubar.setObjectName("menubar")
        self.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(self)
        self.statusbar.setObjectName("statusbar")
        self.setStatusBar(self.statusbar)

        self.label_image.setText("IMAGE")
        self.pushButton_openFile.setText("Open files")
        self.pushButton_Prev.setText("Пред")
        self.pushButton_Next.setText("След")

        QtCore.QMetaObject.connectSlotsByName(self)
        self.buttons()

    
    def buttons(self):
        # Выбор пункта из левого меню
        self.pushButton_openFile.clicked.connect(self.browse_image)
        self.pushButton_Next.clicked.connect(self.next_image)
        self.pushButton_Prev.clicked.connect(self.prev_image)


    def convert_cv_qt(self, cv_img):
        """Convert from an opencv image to QPixmap"""
        rgb_image = cv2.cvtColor(cv_img, cv2.COLOR_BGR2RGB)
        h, w, ch = rgb_image.shape
        bytes_per_line = ch * w
        convert_to_Qt_format = QtGui.QImage(rgb_image.data, w, h, bytes_per_line, QtGui.QImage.Format_RGB888)
        p = convert_to_Qt_format.scaled(
            self.label_image.size().width(), 
            self.label_image.size().height(), 
            QtCore.Qt.KeepAspectRatio
            )
        
        return QtGui.QPixmap.fromImage(p)


    def detect_other_images(self):
        self.table_data = {
            "filename": None,
            "Intersect": None,
            "%": None
        }
        for i in range(1, len(self.filenames)):
            self.detector.set_image_path(
                self.filenames[i]
            )
            intersections = self.detector.calculate_intersections(False)
            self.detected[i] = QtGui.QPixmap(self.convert_cv_qt(self.detector.show_final_image()))

            self.table_data["filename"] = self.filenames[i]
            self.table_data["Intersect"] = [i > 15 for i in intersections]
            self.table_data["%"] = [i for i in intersections]

            self.table.append(self.table_data)


    def start_detect_other_images(self):
        detect_other_pics = Thread(target=self.detect_other_images)
        detect_other_pics.start()
            
    
    def browse_image(self):
        self.filenames, _ = QFileDialog.getOpenFileNames(self, 'Open Image', '', 'Image files (*.jpg *.jpeg *.png)')
        self.detected = [None for _ in range(len(self.filenames))]

        if self.filenames:
            self.detector.set_image_path(
                self.filenames[0]
            )
            self.detector.calculate_intersections(False)
            label_pic = QtGui.QPixmap(self.convert_cv_qt(self.detector.show_final_image()))
            self.label_image.setPixmap(label_pic)
            self.detected[0] = label_pic

            self.start_detect_other_images()

            self.cur_image_indx = 0


    def next_image(self):
        if len(self.filenames) > self.cur_image_indx + 1:
            self.cur_image_indx += 1
            while not self.detected[self.cur_image_indx]:
                time.sleep(0.1)
            self.label_image.setPixmap(self.detected[self.cur_image_indx])


    def prev_image(self):
        if self.cur_image_indx > 0:
            self.cur_image_indx -= 1
            while not self.detected[self.cur_image_indx]:
                time.sleep(0.1)
            self.label_image.setPixmap(self.detected[self.cur_image_indx])


if __name__ == "__main__":
    

    app = QtWidgets.QApplication(sys.argv)
    win = MainWindow()
    win.show()
    sys.exit(app.exec_())

